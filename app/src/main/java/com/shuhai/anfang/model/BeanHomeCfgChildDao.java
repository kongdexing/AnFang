package com.shuhai.anfang.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_HOME_CFG_CHILD".
*/
public class BeanHomeCfgChildDao extends AbstractDao<BeanHomeCfgChild, String> {

    public static final String TABLENAME = "BEAN_HOME_CFG_CHILD";

    /**
     * Properties of entity BeanHomeCfgChild.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Img = new Property(2, String.class, "img", false, "IMG");
        public final static Property Url = new Property(3, String.class, "url", false, "URL");
        public final static Property Pid = new Property(4, String.class, "pid", false, "PID");
    };

    private Query<BeanHomeCfgChild> beanHomeCfg_ChildQuery;

    public BeanHomeCfgChildDao(DaoConfig config) {
        super(config);
    }
    
    public BeanHomeCfgChildDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_HOME_CFG_CHILD\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"IMG\" TEXT," + // 2: img
                "\"URL\" TEXT," + // 3: url
                "\"PID\" TEXT);"); // 4: pid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_HOME_CFG_CHILD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanHomeCfgChild entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(5, pid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanHomeCfgChild entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(3, img);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(4, url);
        }
 
        String pid = entity.getPid();
        if (pid != null) {
            stmt.bindString(5, pid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BeanHomeCfgChild readEntity(Cursor cursor, int offset) {
        BeanHomeCfgChild entity = new BeanHomeCfgChild( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanHomeCfgChild entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImg(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BeanHomeCfgChild entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(BeanHomeCfgChild entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "child" to-many relationship of BeanHomeCfg. */
    public List<BeanHomeCfgChild> _queryBeanHomeCfg_Child(String pid) {
        synchronized (this) {
            if (beanHomeCfg_ChildQuery == null) {
                QueryBuilder<BeanHomeCfgChild> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Pid.eq(null));
                beanHomeCfg_ChildQuery = queryBuilder.build();
            }
        }
        Query<BeanHomeCfgChild> query = beanHomeCfg_ChildQuery.forCurrentThread();
        query.setParameter(0, pid);
        return query.list();
    }

}
