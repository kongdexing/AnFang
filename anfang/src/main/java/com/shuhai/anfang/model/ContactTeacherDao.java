package com.shuhai.anfang.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_TEACHER".
*/
public class ContactTeacherDao extends AbstractDao<ContactTeacher, Void> {

    public static final String TABLENAME = "CONTACT_TEACHER";

    /**
     * Properties of entity ContactTeacher.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property T_id = new Property(0, String.class, "t_id", false, "T_ID");
        public final static Property U_id = new Property(1, String.class, "u_id", false, "U_ID");
        public final static Property S_id = new Property(2, String.class, "s_id", false, "S_ID");
        public final static Property A_id = new Property(3, String.class, "a_id", false, "A_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Sex = new Property(6, String.class, "sex", false, "SEX");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Charge = new Property(8, String.class, "charge", false, "CHARGE");
        public final static Property D_id = new Property(9, String.class, "d_id", false, "D_ID");
        public final static Property Education = new Property(10, String.class, "education", false, "EDUCATION");
        public final static Property School_name = new Property(11, String.class, "school_name", false, "SCHOOL_NAME");
        public final static Property Area_name = new Property(12, String.class, "area_name", false, "AREA_NAME");
        public final static Property D_name = new Property(13, String.class, "d_name", false, "D_NAME");
    };


    public ContactTeacherDao(DaoConfig config) {
        super(config);
    }
    
    public ContactTeacherDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_TEACHER\" (" + //
                "\"T_ID\" TEXT," + // 0: t_id
                "\"U_ID\" TEXT," + // 1: u_id
                "\"S_ID\" TEXT," + // 2: s_id
                "\"A_ID\" TEXT," + // 3: a_id
                "\"NAME\" TEXT," + // 4: name
                "\"PHONE\" TEXT," + // 5: phone
                "\"SEX\" TEXT," + // 6: sex
                "\"EMAIL\" TEXT," + // 7: email
                "\"CHARGE\" TEXT," + // 8: charge
                "\"D_ID\" TEXT," + // 9: d_id
                "\"EDUCATION\" TEXT," + // 10: education
                "\"SCHOOL_NAME\" TEXT," + // 11: school_name
                "\"AREA_NAME\" TEXT," + // 12: area_name
                "\"D_NAME\" TEXT);"); // 13: d_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_TEACHER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactTeacher entity) {
        stmt.clearBindings();
 
        String t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindString(1, t_id);
        }
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(2, u_id);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(3, s_id);
        }
 
        String a_id = entity.getA_id();
        if (a_id != null) {
            stmt.bindString(4, a_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String charge = entity.getCharge();
        if (charge != null) {
            stmt.bindString(9, charge);
        }
 
        String d_id = entity.getD_id();
        if (d_id != null) {
            stmt.bindString(10, d_id);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(11, education);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(12, school_name);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(13, area_name);
        }
 
        String d_name = entity.getD_name();
        if (d_name != null) {
            stmt.bindString(14, d_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactTeacher entity) {
        stmt.clearBindings();
 
        String t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindString(1, t_id);
        }
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(2, u_id);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(3, s_id);
        }
 
        String a_id = entity.getA_id();
        if (a_id != null) {
            stmt.bindString(4, a_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(7, sex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String charge = entity.getCharge();
        if (charge != null) {
            stmt.bindString(9, charge);
        }
 
        String d_id = entity.getD_id();
        if (d_id != null) {
            stmt.bindString(10, d_id);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(11, education);
        }
 
        String school_name = entity.getSchool_name();
        if (school_name != null) {
            stmt.bindString(12, school_name);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(13, area_name);
        }
 
        String d_name = entity.getD_name();
        if (d_name != null) {
            stmt.bindString(14, d_name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ContactTeacher readEntity(Cursor cursor, int offset) {
        ContactTeacher entity = new ContactTeacher( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // t_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // u_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // s_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // a_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // charge
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // d_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // education
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // school_name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // area_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // d_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactTeacher entity, int offset) {
        entity.setT_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setU_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setS_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setA_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCharge(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setD_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setEducation(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSchool_name(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setArea_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setD_name(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ContactTeacher entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ContactTeacher entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
