package com.shuhai.anfang.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_MY_CLASS".
*/
public class BeanMyClassDao extends AbstractDao<BeanMyClass, Void> {

    public static final String TABLENAME = "BEAN_MY_CLASS";

    /**
     * Properties of entity BeanMyClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property C_id = new Property(0, String.class, "c_id", false, "C_ID");
        public final static Property S_id = new Property(1, String.class, "s_id", false, "S_ID");
        public final static Property A_id = new Property(2, String.class, "a_id", false, "A_ID");
        public final static Property G_id = new Property(3, String.class, "g_id", false, "G_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property T_id = new Property(5, String.class, "t_id", false, "T_ID");
        public final static Property Memo = new Property(6, String.class, "memo", false, "MEMO");
        public final static Property G_name = new Property(7, String.class, "g_name", false, "G_NAME");
        public final static Property T_name = new Property(8, String.class, "t_name", false, "T_NAME");
        public final static Property Stu_count = new Property(9, String.class, "stu_count", false, "STU_COUNT");
    };


    public BeanMyClassDao(DaoConfig config) {
        super(config);
    }
    
    public BeanMyClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_MY_CLASS\" (" + //
                "\"C_ID\" TEXT," + // 0: c_id
                "\"S_ID\" TEXT," + // 1: s_id
                "\"A_ID\" TEXT," + // 2: a_id
                "\"G_ID\" TEXT," + // 3: g_id
                "\"NAME\" TEXT," + // 4: name
                "\"T_ID\" TEXT," + // 5: t_id
                "\"MEMO\" TEXT," + // 6: memo
                "\"G_NAME\" TEXT," + // 7: g_name
                "\"T_NAME\" TEXT," + // 8: t_name
                "\"STU_COUNT\" TEXT);"); // 9: stu_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_MY_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanMyClass entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(2, s_id);
        }
 
        String a_id = entity.getA_id();
        if (a_id != null) {
            stmt.bindString(3, a_id);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(4, g_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindString(6, t_id);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(8, g_name);
        }
 
        String t_name = entity.getT_name();
        if (t_name != null) {
            stmt.bindString(9, t_name);
        }
 
        String stu_count = entity.getStu_count();
        if (stu_count != null) {
            stmt.bindString(10, stu_count);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanMyClass entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindString(2, s_id);
        }
 
        String a_id = entity.getA_id();
        if (a_id != null) {
            stmt.bindString(3, a_id);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(4, g_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String t_id = entity.getT_id();
        if (t_id != null) {
            stmt.bindString(6, t_id);
        }
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(7, memo);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(8, g_name);
        }
 
        String t_name = entity.getT_name();
        if (t_name != null) {
            stmt.bindString(9, t_name);
        }
 
        String stu_count = entity.getStu_count();
        if (stu_count != null) {
            stmt.bindString(10, stu_count);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanMyClass readEntity(Cursor cursor, int offset) {
        BeanMyClass entity = new BeanMyClass( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // c_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // a_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // g_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // t_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // memo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // g_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // t_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // stu_count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanMyClass entity, int offset) {
        entity.setC_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setA_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setG_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setT_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMemo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setG_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setT_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStu_count(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanMyClass entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanMyClass entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
