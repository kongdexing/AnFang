package com.shuhai.anfang.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_TEACHER_FOR_PARENT".
*/
public class ContactTeacherForParentDao extends AbstractDao<ContactTeacherForParent, Void> {

    public static final String TABLENAME = "CONTACT_TEACHER_FOR_PARENT";

    /**
     * Properties of entity ContactTeacherForParent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property U_id = new Property(0, String.class, "u_id", false, "U_ID");
        public final static Property S_name = new Property(1, String.class, "s_name", false, "S_NAME");
        public final static Property A_name = new Property(2, String.class, "a_name", false, "A_NAME");
        public final static Property D_name = new Property(3, String.class, "d_name", false, "D_NAME");
        public final static Property Education = new Property(4, String.class, "education", false, "EDUCATION");
        public final static Property Email = new Property(5, String.class, "email", false, "EMAIL");
        public final static Property Charge = new Property(6, String.class, "charge", false, "CHARGE");
        public final static Property G_id = new Property(7, String.class, "g_id", false, "G_ID");
        public final static Property C_id = new Property(8, String.class, "c_id", false, "C_ID");
    };


    public ContactTeacherForParentDao(DaoConfig config) {
        super(config);
    }
    
    public ContactTeacherForParentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_TEACHER_FOR_PARENT\" (" + //
                "\"U_ID\" TEXT," + // 0: u_id
                "\"S_NAME\" TEXT," + // 1: s_name
                "\"A_NAME\" TEXT," + // 2: a_name
                "\"D_NAME\" TEXT," + // 3: d_name
                "\"EDUCATION\" TEXT," + // 4: education
                "\"EMAIL\" TEXT," + // 5: email
                "\"CHARGE\" TEXT," + // 6: charge
                "\"G_ID\" TEXT," + // 7: g_id
                "\"C_ID\" TEXT);"); // 8: c_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_TEACHER_FOR_PARENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactTeacherForParent entity) {
        stmt.clearBindings();
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(1, u_id);
        }
 
        String s_name = entity.getS_name();
        if (s_name != null) {
            stmt.bindString(2, s_name);
        }
 
        String a_name = entity.getA_name();
        if (a_name != null) {
            stmt.bindString(3, a_name);
        }
 
        String d_name = entity.getD_name();
        if (d_name != null) {
            stmt.bindString(4, d_name);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(5, education);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String charge = entity.getCharge();
        if (charge != null) {
            stmt.bindString(7, charge);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(8, g_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(9, c_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactTeacherForParent entity) {
        stmt.clearBindings();
 
        String u_id = entity.getU_id();
        if (u_id != null) {
            stmt.bindString(1, u_id);
        }
 
        String s_name = entity.getS_name();
        if (s_name != null) {
            stmt.bindString(2, s_name);
        }
 
        String a_name = entity.getA_name();
        if (a_name != null) {
            stmt.bindString(3, a_name);
        }
 
        String d_name = entity.getD_name();
        if (d_name != null) {
            stmt.bindString(4, d_name);
        }
 
        String education = entity.getEducation();
        if (education != null) {
            stmt.bindString(5, education);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(6, email);
        }
 
        String charge = entity.getCharge();
        if (charge != null) {
            stmt.bindString(7, charge);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(8, g_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(9, c_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ContactTeacherForParent readEntity(Cursor cursor, int offset) {
        ContactTeacherForParent entity = new ContactTeacherForParent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // u_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // s_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // a_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // d_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // education
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // email
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // charge
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // g_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // c_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactTeacherForParent entity, int offset) {
        entity.setU_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setS_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setA_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setD_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEducation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEmail(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCharge(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setG_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setC_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ContactTeacherForParent entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ContactTeacherForParent entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
