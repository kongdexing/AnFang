package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_PARENT".
*/
public class BeanParentDao extends AbstractDao<BeanParent, Void> {

    public static final String TABLENAME = "BEAN_PARENT";

    /**
     * Properties of entity BeanParent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property User_id = new Property(3, String.class, "user_id", false, "USER_ID");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Qq_openid = new Property(6, String.class, "qq_openid", false, "QQ_OPENID");
        public final static Property Wx_openid = new Property(7, String.class, "wx_openid", false, "WX_OPENID");
        public final static Property Head_portrait = new Property(8, String.class, "head_portrait", false, "HEAD_PORTRAIT");
        public final static Property Api_id = new Property(9, String.class, "api_id", false, "API_ID");
        public final static Property Security_key = new Property(10, String.class, "security_key", false, "SECURITY_KEY");
        public final static Property Token = new Property(11, String.class, "token", false, "TOKEN");
    };


    public BeanParentDao(DaoConfig config) {
        super(config);
    }
    
    public BeanParentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_PARENT\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"USERNAME\" TEXT," + // 1: username
                "\"PASSWORD\" TEXT," + // 2: password
                "\"USER_ID\" TEXT," + // 3: user_id
                "\"SEX\" TEXT," + // 4: sex
                "\"PHONE\" TEXT," + // 5: phone
                "\"QQ_OPENID\" TEXT," + // 6: qq_openid
                "\"WX_OPENID\" TEXT," + // 7: wx_openid
                "\"HEAD_PORTRAIT\" TEXT," + // 8: head_portrait
                "\"API_ID\" TEXT," + // 9: api_id
                "\"SECURITY_KEY\" TEXT," + // 10: security_key
                "\"TOKEN\" TEXT);"); // 11: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_PARENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanParent entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String qq_openid = entity.getQq_openid();
        if (qq_openid != null) {
            stmt.bindString(7, qq_openid);
        }
 
        String wx_openid = entity.getWx_openid();
        if (wx_openid != null) {
            stmt.bindString(8, wx_openid);
        }
 
        String head_portrait = entity.getHead_portrait();
        if (head_portrait != null) {
            stmt.bindString(9, head_portrait);
        }
 
        String api_id = entity.getApi_id();
        if (api_id != null) {
            stmt.bindString(10, api_id);
        }
 
        String security_key = entity.getSecurity_key();
        if (security_key != null) {
            stmt.bindString(11, security_key);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanParent entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(4, user_id);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String qq_openid = entity.getQq_openid();
        if (qq_openid != null) {
            stmt.bindString(7, qq_openid);
        }
 
        String wx_openid = entity.getWx_openid();
        if (wx_openid != null) {
            stmt.bindString(8, wx_openid);
        }
 
        String head_portrait = entity.getHead_portrait();
        if (head_portrait != null) {
            stmt.bindString(9, head_portrait);
        }
 
        String api_id = entity.getApi_id();
        if (api_id != null) {
            stmt.bindString(10, api_id);
        }
 
        String security_key = entity.getSecurity_key();
        if (security_key != null) {
            stmt.bindString(11, security_key);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(12, token);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanParent readEntity(Cursor cursor, int offset) {
        BeanParent entity = new BeanParent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // qq_openid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // wx_openid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // head_portrait
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // api_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // security_key
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // token
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanParent entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQq_openid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWx_openid(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHead_portrait(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setApi_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSecurity_key(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setToken(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanParent entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanParent entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
