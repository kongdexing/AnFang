package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_STUDENT".
*/
public class ContactStudentDao extends AbstractDao<ContactStudent, String> {

    public static final String TABLENAME = "CONTACT_STUDENT";

    /**
     * Properties of entity ContactStudent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property G_id = new Property(0, String.class, "g_id", false, "G_ID");
        public final static Property C_id = new Property(1, String.class, "c_id", false, "C_ID");
        public final static Property Stu_id = new Property(2, String.class, "stu_id", true, "STU_ID");
        public final static Property Stu_name = new Property(3, String.class, "stu_name", false, "STU_NAME");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Birth_date = new Property(5, String.class, "birth_date", false, "BIRTH_DATE");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property G_name = new Property(7, String.class, "g_name", false, "G_NAME");
        public final static Property C_name = new Property(8, String.class, "c_name", false, "C_NAME");
    };

    private DaoSession daoSession;


    public ContactStudentDao(DaoConfig config) {
        super(config);
    }
    
    public ContactStudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_STUDENT\" (" + //
                "\"G_ID\" TEXT," + // 0: g_id
                "\"C_ID\" TEXT," + // 1: c_id
                "\"STU_ID\" TEXT PRIMARY KEY NOT NULL ," + // 2: stu_id
                "\"STU_NAME\" TEXT," + // 3: stu_name
                "\"SEX\" TEXT," + // 4: sex
                "\"BIRTH_DATE\" TEXT," + // 5: birth_date
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"G_NAME\" TEXT," + // 7: g_name
                "\"C_NAME\" TEXT);"); // 8: c_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactStudent entity) {
        stmt.clearBindings();
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(1, g_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(2, c_id);
        }
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(3, stu_id);
        }
 
        String stu_name = entity.getStu_name();
        if (stu_name != null) {
            stmt.bindString(4, stu_name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String birth_date = entity.getBirth_date();
        if (birth_date != null) {
            stmt.bindString(6, birth_date);
        }
        stmt.bindLong(7, entity.getAge());
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(8, g_name);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(9, c_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactStudent entity) {
        stmt.clearBindings();
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(1, g_id);
        }
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(2, c_id);
        }
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(3, stu_id);
        }
 
        String stu_name = entity.getStu_name();
        if (stu_name != null) {
            stmt.bindString(4, stu_name);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String birth_date = entity.getBirth_date();
        if (birth_date != null) {
            stmt.bindString(6, birth_date);
        }
        stmt.bindLong(7, entity.getAge());
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(8, g_name);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(9, c_name);
        }
    }

    @Override
    protected final void attachEntity(ContactStudent entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public ContactStudent readEntity(Cursor cursor, int offset) {
        ContactStudent entity = new ContactStudent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // g_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // c_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stu_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // stu_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // birth_date
            cursor.getInt(offset + 6), // age
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // g_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // c_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactStudent entity, int offset) {
        entity.setG_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setC_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStu_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStu_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBirth_date(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setG_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setC_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ContactStudent entity, long rowId) {
        return entity.getStu_id();
    }
    
    @Override
    public String getKey(ContactStudent entity) {
        if(entity != null) {
            return entity.getStu_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
