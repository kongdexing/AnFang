package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_STUDENT".
*/
public class BeanStudentDao extends AbstractDao<BeanStudent, String> {

    public static final String TABLENAME = "BEAN_STUDENT";

    /**
     * Properties of entity BeanStudent.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Stu_id = new Property(0, String.class, "stu_id", true, "STU_ID");
        public final static Property Stu_name = new Property(1, String.class, "stu_name", false, "STU_NAME");
        public final static Property Imei_id = new Property(2, String.class, "imei_id", false, "IMEI_ID");
        public final static Property Watch_phone = new Property(3, String.class, "watch_phone", false, "WATCH_PHONE");
        public final static Property Sex = new Property(4, String.class, "sex", false, "SEX");
        public final static Property Sos = new Property(5, String.class, "sos", false, "SOS");
        public final static Property Whitelist = new Property(6, String.class, "whitelist", false, "WHITELIST");
        public final static Property Photo = new Property(7, String.class, "photo", false, "PHOTO");
        public final static Property Relation = new Property(8, String.class, "relation", false, "RELATION");
    };


    public BeanStudentDao(DaoConfig config) {
        super(config);
    }
    
    public BeanStudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_STUDENT\" (" + //
                "\"STU_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: stu_id
                "\"STU_NAME\" TEXT," + // 1: stu_name
                "\"IMEI_ID\" TEXT," + // 2: imei_id
                "\"WATCH_PHONE\" TEXT," + // 3: watch_phone
                "\"SEX\" TEXT," + // 4: sex
                "\"SOS\" TEXT," + // 5: sos
                "\"WHITELIST\" TEXT," + // 6: whitelist
                "\"PHOTO\" TEXT," + // 7: photo
                "\"RELATION\" TEXT);"); // 8: relation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_STUDENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanStudent entity) {
        stmt.clearBindings();
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(1, stu_id);
        }
 
        String stu_name = entity.getStu_name();
        if (stu_name != null) {
            stmt.bindString(2, stu_name);
        }
 
        String imei_id = entity.getImei_id();
        if (imei_id != null) {
            stmt.bindString(3, imei_id);
        }
 
        String watch_phone = entity.getWatch_phone();
        if (watch_phone != null) {
            stmt.bindString(4, watch_phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String sos = entity.getSos();
        if (sos != null) {
            stmt.bindString(6, sos);
        }
 
        String whitelist = entity.getWhitelist();
        if (whitelist != null) {
            stmt.bindString(7, whitelist);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(9, relation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanStudent entity) {
        stmt.clearBindings();
 
        String stu_id = entity.getStu_id();
        if (stu_id != null) {
            stmt.bindString(1, stu_id);
        }
 
        String stu_name = entity.getStu_name();
        if (stu_name != null) {
            stmt.bindString(2, stu_name);
        }
 
        String imei_id = entity.getImei_id();
        if (imei_id != null) {
            stmt.bindString(3, imei_id);
        }
 
        String watch_phone = entity.getWatch_phone();
        if (watch_phone != null) {
            stmt.bindString(4, watch_phone);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(5, sex);
        }
 
        String sos = entity.getSos();
        if (sos != null) {
            stmt.bindString(6, sos);
        }
 
        String whitelist = entity.getWhitelist();
        if (whitelist != null) {
            stmt.bindString(7, whitelist);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(8, photo);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(9, relation);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BeanStudent readEntity(Cursor cursor, int offset) {
        BeanStudent entity = new BeanStudent( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // stu_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stu_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imei_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // watch_phone
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sos
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // whitelist
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // photo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // relation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanStudent entity, int offset) {
        entity.setStu_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStu_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImei_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWatch_phone(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSos(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setWhitelist(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhoto(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRelation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BeanStudent entity, long rowId) {
        return entity.getStu_id();
    }
    
    @Override
    public String getKey(BeanStudent entity) {
        if(entity != null) {
            return entity.getStu_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
