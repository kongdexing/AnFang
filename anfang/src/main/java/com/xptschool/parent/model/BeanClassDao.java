package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_CLASS".
*/
public class BeanClassDao extends AbstractDao<BeanClass, Void> {

    public static final String TABLENAME = "BEAN_CLASS";

    /**
     * Properties of entity BeanClass.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property C_id = new Property(0, String.class, "c_id", false, "C_ID");
        public final static Property C_name = new Property(1, String.class, "c_name", false, "C_NAME");
        public final static Property G_id = new Property(2, String.class, "g_id", false, "G_ID");
        public final static Property G_name = new Property(3, String.class, "g_name", false, "G_NAME");
        public final static Property Is_head = new Property(4, int.class, "is_head", false, "IS_HEAD");
    };


    public BeanClassDao(DaoConfig config) {
        super(config);
    }
    
    public BeanClassDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_CLASS\" (" + //
                "\"C_ID\" TEXT," + // 0: c_id
                "\"C_NAME\" TEXT," + // 1: c_name
                "\"G_ID\" TEXT," + // 2: g_id
                "\"G_NAME\" TEXT," + // 3: g_name
                "\"IS_HEAD\" INTEGER NOT NULL );"); // 4: is_head
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_CLASS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanClass entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(2, c_name);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(3, g_id);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(4, g_name);
        }
        stmt.bindLong(5, entity.getIs_head());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanClass entity) {
        stmt.clearBindings();
 
        String c_id = entity.getC_id();
        if (c_id != null) {
            stmt.bindString(1, c_id);
        }
 
        String c_name = entity.getC_name();
        if (c_name != null) {
            stmt.bindString(2, c_name);
        }
 
        String g_id = entity.getG_id();
        if (g_id != null) {
            stmt.bindString(3, g_id);
        }
 
        String g_name = entity.getG_name();
        if (g_name != null) {
            stmt.bindString(4, g_name);
        }
        stmt.bindLong(5, entity.getIs_head());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanClass readEntity(Cursor cursor, int offset) {
        BeanClass entity = new BeanClass( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // c_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // c_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // g_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // g_name
            cursor.getInt(offset + 4) // is_head
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanClass entity, int offset) {
        entity.setC_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setC_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setG_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setG_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIs_head(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanClass entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanClass entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
