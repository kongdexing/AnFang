package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_COUNTY".
*/
public class BeanCountyDao extends AbstractDao<BeanCounty, Void> {

    public static final String TABLENAME = "BEAN_COUNTY";

    /**
     * Properties of entity BeanCounty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Region_id = new Property(0, String.class, "region_id", false, "REGION_ID");
        public final static Property Region_code = new Property(1, String.class, "region_code", false, "REGION_CODE");
        public final static Property Region_name = new Property(2, String.class, "region_name", false, "REGION_NAME");
        public final static Property Parent_id = new Property(3, String.class, "parent_id", false, "PARENT_ID");
        public final static Property Region_level = new Property(4, String.class, "region_level", false, "REGION_LEVEL");
    };


    public BeanCountyDao(DaoConfig config) {
        super(config);
    }
    
    public BeanCountyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_COUNTY\" (" + //
                "\"REGION_ID\" TEXT," + // 0: region_id
                "\"REGION_CODE\" TEXT," + // 1: region_code
                "\"REGION_NAME\" TEXT," + // 2: region_name
                "\"PARENT_ID\" TEXT," + // 3: parent_id
                "\"REGION_LEVEL\" TEXT);"); // 4: region_level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_COUNTY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanCounty entity) {
        stmt.clearBindings();
 
        String region_id = entity.getRegion_id();
        if (region_id != null) {
            stmt.bindString(1, region_id);
        }
 
        String region_code = entity.getRegion_code();
        if (region_code != null) {
            stmt.bindString(2, region_code);
        }
 
        String region_name = entity.getRegion_name();
        if (region_name != null) {
            stmt.bindString(3, region_name);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(4, parent_id);
        }
 
        String region_level = entity.getRegion_level();
        if (region_level != null) {
            stmt.bindString(5, region_level);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanCounty entity) {
        stmt.clearBindings();
 
        String region_id = entity.getRegion_id();
        if (region_id != null) {
            stmt.bindString(1, region_id);
        }
 
        String region_code = entity.getRegion_code();
        if (region_code != null) {
            stmt.bindString(2, region_code);
        }
 
        String region_name = entity.getRegion_name();
        if (region_name != null) {
            stmt.bindString(3, region_name);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(4, parent_id);
        }
 
        String region_level = entity.getRegion_level();
        if (region_level != null) {
            stmt.bindString(5, region_level);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanCounty readEntity(Cursor cursor, int offset) {
        BeanCounty entity = new BeanCounty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // region_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // region_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // region_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parent_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // region_level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanCounty entity, int offset) {
        entity.setRegion_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRegion_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegion_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParent_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegion_level(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanCounty entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanCounty entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
