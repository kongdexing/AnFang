package com.xptschool.parent.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BEAN_LEARNING_MODULE".
*/
public class BeanLearningModuleDao extends AbstractDao<BeanLearningModule, Void> {

    public static final String TABLENAME = "BEAN_LEARNING_MODULE";

    /**
     * Properties of entity BeanLearningModule.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Title = new Property(0, String.class, "title", false, "TITLE");
        public final static Property Icon_url = new Property(1, String.class, "icon_url", false, "ICON_URL");
        public final static Property Web_url = new Property(2, String.class, "web_url", false, "WEB_URL");
    };


    public BeanLearningModuleDao(DaoConfig config) {
        super(config);
    }
    
    public BeanLearningModuleDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BEAN_LEARNING_MODULE\" (" + //
                "\"TITLE\" TEXT," + // 0: title
                "\"ICON_URL\" TEXT," + // 1: icon_url
                "\"WEB_URL\" TEXT);"); // 2: web_url
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BEAN_LEARNING_MODULE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BeanLearningModule entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(2, icon_url);
        }
 
        String web_url = entity.getWeb_url();
        if (web_url != null) {
            stmt.bindString(3, web_url);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BeanLearningModule entity) {
        stmt.clearBindings();
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(1, title);
        }
 
        String icon_url = entity.getIcon_url();
        if (icon_url != null) {
            stmt.bindString(2, icon_url);
        }
 
        String web_url = entity.getWeb_url();
        if (web_url != null) {
            stmt.bindString(3, web_url);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BeanLearningModule readEntity(Cursor cursor, int offset) {
        BeanLearningModule entity = new BeanLearningModule( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // title
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // icon_url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // web_url
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BeanLearningModule entity, int offset) {
        entity.setTitle(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIcon_url(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeb_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BeanLearningModule entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BeanLearningModule entity) {
        return null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
